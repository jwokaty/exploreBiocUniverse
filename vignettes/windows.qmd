---
title: "bioc.r-universe.dev windows devel"
format: html
editor: visual
engine: knitr
---

Let's get info about all windows builds.

## Install dependencies

```{r library, eval = "hide", message = FALSE}

library(universe)
library(BiocPkgTools)
library(dplyr)
library(DT)

# set max.print to get all packages
options(max.print = 3000L)
```

Get data for bioc.r-universe.dev and bbs devel

```{r all_bioc_ru, message = FALSE}
devel <- "3.22"
ru_info <- universe::universe_all_packages("bioc", limit = 3000L)
bbs_info <- BiocPkgTools::biocPkgList(version = devel, repo="BioCsoft")
```

Are the same packages in bioc.r-universe.dev and 3.22 bbs?

```{r comparison}
ru_pkgs <- universe::universe_ls("bioc")
bbs_pkgs <- bbs_info$Package
only_ru <- c()
only_bbs <- c()

if (!identical(ru_pkgs, bbs_pkgs)) {
    only_ru <- setdiff(ru_pkgs, bbs_pkgs)
    only_bbs <- setdiff(bbs_pkgs, ru_pkgs)
    message("The two sets are not the same.")
    message("Only in bioc.r-universe.dev: ", paste0(only_ru, collapse = " "))
    message("Only in ", devel, " branch on the BBS: ",
            paste0(only_bbs, collapse = " "))
} else {
    message("The ", devel, " branch on the BBS and bioc.r-universe.dev have",
            "the same packages.")
}
```

For packages not in BBS / only in bioc.r-universe.dev

```{r only_ru}

only_ru_info <- data.frame(Package = only_ru,
                           RemoteUrl = "")

for (pkg in only_ru) {
    pkg_info <- universe::universe_one_package("bioc", pkg)
    only_ru_info[only_ru_info$Package == pkg, ]$RemoteUrl <- pkg_info$RemoteUrl
}

only_ru_info
```

If any of the above RemoteUrls are not from https://github.com/bioc then they
were added via https://github.com/r-universe/bioc/blob/master/.remotes.json.

We'll need to check why some packages aren't in bioc.r-universe.dev; however,
we already know `scafari` isn't there because it has files > 100MB in its
git history.

```{r only_in_bbs}
only_bbs_info <- bbs_info |>
  dplyr::filter(Package %in% only_bbs) |>
  dplyr::mutate(Deprecated = PackageStatus) |>
  dplyr::select(Package, Deprecated)

  only_bbs_info
```

So all packages except for `scafari` should be marked for deprecation. Packages
are removed immediately in bioc.r-universe.dev if they are deprecated. Maybe
this will affect packages depending on them that expect the longer deprecation
process in Bioconductor?

## Windows info from bioc.r-universe.dev

Next we want to get the data from all windows builds in bioc.r-universe.dev.
We'll construct the path to the zip using the data associated with the win
`_binaries` information associated with our version of R if a commit hash exists.

```{r find-all-windows-builds}
library(tibble)
r_version <- "4.5.1"

windows_builds <- data.frame(Package = "",
                             Version = "",
                             JobCheck = "",
                             BinariesCheck = "",
                             #DatePublication = "",
                             Commit = "",
                             MD5sum = "",
                             RemoteSha = "",
                             RemoteUrl = "",
                             Published = "",
                             BinariesBuildDate = "",
                             JobId = "",
                             BuildUrl = "",
                             BinariesStatus = "",
                             File = "")

for (i in seq_along(ru_info)) {
  jobid <- ""
  jobcheck <- ""
  commit <- ""
  buildurl <- ""
  binariesstatus <- ""
  buildcheck <- ""
  binariesbuilddate <- ""
  binariesversion <- ""

  for (j in seq_along(ru_info[[i]]$`_jobs`)) {
      job <- ru_info[[i]]$`_jobs`[[j]]
      if (job$config == "windows-release" && job$r == r_version) {
          jobid <- as.character(job$job)
          jobcheck <- job$check
          break
      }
  }
  
  for (k in seq_along(ru_info[[i]]$`_binaries`)) {
      binary <- ru_info[[i]]$`_binaries`[[k]]
      if (binary$os == "win" && binary$r == r_version) {
          commit <- as.character(binary$commit)
          buildurl <- binary$buildurl
          binariesstatus <- binary$status
          buildcheck <- binary$check
          binariesbuilddate <- binary$date
          binariesversion <- binary$version
          break
      }
  }
  
  path <- "https://bioc.r-universe.dev/bin/windows/contrib/4.5/"

  windows_builds <- tibble::add_row(windows_builds,
                                    Package = ru_info[[i]]$Package,
                                    Version = ru_info[[i]]$Version,
                                    JobCheck = jobcheck,
                                    BinariesCheck = buildcheck,
                                    #DatePublication = ru_info[[i]]$`Date/Publication`,
                                    Commit = substr(commit, 1, 5),
                                    MD5sum = substr(ru_info[[i]]$MD5sum, 1, 5),
                                    RemoteSha = substr(ru_info[[i]]$RemoteSha, 1, 5),
                                    RemoteUrl = ru_info[[i]]$RemoteUrl,
                                    Published = ru_info[[i]]$`_published`,
                                    BinariesBuildDate = binariesbuilddate,
                                    JobId = jobid,
                                    BuildUrl = buildurl,
                                    BinariesStatus = binariesstatus,
                                    File = ifelse(commit != "", paste0(path, Package, "_", binariesversion, ".zip"), ""))
}

# drop blank first row
windows_builds <- windows_builds[c(-1), ]

windows_builds <- windows_builds |>
    dplyr::arrange(Package)

DT::datatable(windows_builds)
```

Why are some packages missing binaries? Are these are packages that
have failed to build because Windows isn't supported?

* `infercnv` fails to build due a missing Python dependency.

```{r packages-without-windows-binaries}
missing_binaries <- windows_builds |>
    dplyr::filter(File == "") |>
    dplyr::select(Package)

missing_binaries
```

How many packages are failing on Windows?

```{r win-errors}

failing_windows <- windows_builds |>
    dplyr::filter(BinariesCheck == "ERROR") |>
    dplyr::select(Package, Version, File, Commit, JobCheck,
                  BinariesBuildDate, JobId, BuildUrl, BinariesStatus)

DT::datatable(failing_windows)
```

What is the difference between Job Check and Binaries Check data points in
R Universe?

```{r job-vs-binaries}

windows_builds |>
    dplyr::filter(JobCheck != BinariesCheck)
```

```{r sessionInfo}
sessionInfo()
```