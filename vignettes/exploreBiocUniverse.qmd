---
title: "exploreBiocUniverse"
format: html
editor: visual
engine: knitr
---

# Comparing Bioconductor packages in R-Universe and the BBS

Skip to [Packages not in agreements](#packages-not-in-agreement).

## R Universe

We can use the [universe](https://github.com/ropensci/universe/) package to explore the R-Universe (RU) API. (We might need to increase the `max.print` to show all packages.)

```{r install_universe, eval = "hide", message = FALSE}
if (!require("universe", quietly = TRUE))
    install.packages("universe", repos = "https://ropensci.r-universe.dev")
library(universe)
options(max.print = 3000L)
```

Get data for the Bioc Universe (BU).

```{r all_bioc_ru}
ru_pkgs_i <- universe_all_packages("bioc", limit = 3000L)
```

What packages are in bioc universe?

```{r get_a_pkg_in_ru}
ru_pkgs <- universe_ls("bioc")
```

## BBS

Get Bioconductor packages in BBS

```{r get_pkgs_in_bbs, message = FALSE}
library(BiocPkgTools)

bbs_pkgs_i <- BiocPkgTools::biocBuildReport(
  version = BiocManager::version(),
  pkgType = "software")
bbs_pkgs <- unlist(unique(bbs_pkgs_i$pkg))
```

Packages in RU vs BBS

```{r number_of_pkgs, message = FALSE}
library(dplyr)

data.frame(RU = length(ru_pkgs), BBS = length(bbs_pkgs),
           row.names = c("Total"))

not_in_ru <- setdiff(bbs_pkgs, ru_pkgs)
not_in_bbs <- setdiff(ru_pkgs, bbs_pkgs)

# There's probably a better way to do this
pkgs_not_in_bbs <- data.frame(Package = character(), Version = character(), 
                              Created = character(), Published = character(),
                              RemoteUrl = character())

for (pkg in not_in_bbs) {
  pi <- universe_one_package("bioc", pkg)
  pkgs_not_in_bbs <- pkgs_not_in_bbs |>
    add_row(Package = pi$Package, Version = pi$Version,
            Created = pi$`_created`, Published = pi$`_published`,
            RemoteUrl = pi$RemoteUrl)
}
```

### Packages not in BBS but in RU

Packages in RU but not in the BBS are likely added by maintainers via <https://github.com/r-universe/bioc/blob/master/.remotes.json>.

```{r pkgs_not_in_bbs}
pkgs_not_in_bbs |> knitr::kable() |>
  kableExtra::kable_styling(
    bootstrap_options = c("hover", "responsive")
  )
```

### Packages in BBS but not in RU

```{r bbs_pkgs_not_in_ru}
not_in_ru
```

The following packages are not deprecated but are not in RU.

```{r deprecated_pkgs}
depre_pkgs <- filter(bbs_pkgs_i, Deprecated == TRUE) |> pull(pkg) |>
  unique()
setdiff(not_in_ru, depre_pkgs)
```

## Making sense of R Universe's build status in respect to R CMD build, check, etc.

Looking at the status of linux x86_64 binary builds. The build "status" appears to get "success", "failure", or "cancelled" from the GitHub Action overall. The "check" value corresponds to `R CMD check`. I interpret the result of "status" to be "success" OK and "failure" ERROR for `R CMD build` but it may mean something else. We'll use CANCELLED as it is. There's also a special status for documentation, which is handled separately from build/check, which may account for some discrepancies. Not sure if the build status for vignettes is available in the API.

Packages with my comment "Missing R4.5 on Linux" did have data in the API but no x86_64 linux with R 4.5.

```{r ru_status}
ru_status <- data.frame(Package = character(), Version = character(), 
                        Status = character(), Build = character(),
                        Check = character(), Comment = character())
                        #, Buildurl = character(),
                        # Commit = character())

for (p in ru_pkgs_i) {
  build <- c(status = NA, build = NA, check = NA, buildurl = NA)
  comment = ""
  for (b in p$`_binaries`) {
    if (b$os == "linux" && b$r == "4.5.0") {
      build <- c(status = b$status, check = b$check, buildurl = b$buildurl)
      break
    }
  }
  if (is.na(build["status"])) {
    comment = "Missing R4.5 on Linux" 
  } else if (build["status"] == "success") {
    build["build"] <- "OK"
  } else if (build["status"] == "failure") {
    build["build"] <- "ERROR, TIMEOUT, or skipped"
    comment = build["buildurl"]
  } else if (build["status"] == "cancelled") {
    build["build"] <- "CANCELLED"
    comment = build["buildurl"]
  }
  ru_status <- ru_status |>
    add_row(Package = p$Package, Version = p$Version, Status = build["status"],
            Build = build["build"], Check = build["check"], Comment = comment)
            #, Buildurl = build["buildurl"], Commit = p$`_commit`$id)
}

# order by Package
ru_status <- ru_status[order(ru_status$Package), ]
```

```{r bbs_status, message = FALSE}
library(purrr)

# Helper functions
get_result <- function(x) {
  entry <- bbs_pkgs_i |>
    filter(pkg == x["pkg"], stage == x["stage"], node == x["node"])
  if (dim(entry)[1] == 0) {
    entry <- ""
  } else {
    entry$result
  }
}

get_install <- function(pkg) {
  get_result(c(pkg = pkg, stage = "install", node = "nebbiolo1"))
}

get_build <- function(pkg) {
  get_result(c(pkg = pkg, stage = "buildsrc", node = "nebbiolo1"))
}

get_check <- function(pkg) {
  get_result(c(pkg = pkg, stage = "checksrc", node = "nebbiolo1"))
}

bbs_status <- bbs_pkgs_i |>
  filter(node == "nebbiolo2") |>
  select(pkg, version, Deprecated) |>
  distinct(pkg, .keep_all = TRUE) |>
  mutate(install = map_chr(pkg, get_install)) |>
  mutate(build = map_chr(pkg, get_build)) |>
  mutate(check = map_chr(pkg, get_check))
```

### Compare the status of packages in RU and BBS

We can only compare `check` and `build`, so we'll check if those columns agree. Note that in the BBS, `check` can show "WARNINGS" whereas R Universe can show "WARNING" (no s) as well as "OK", "NOTE", "ERROR", or NA.

Note: - Deprecated packages are removed immedately in R Universe. - Packages may have different versions since R-Universe builds new versions after detecting a "push".

The following includes packages not deprecated in BBS where build and check don't agree.

```{r bbs_ru_comparison}
names(ru_status) <- c("pkg", "version", "status", "build", "check", "comment")
bbs_ru_comparison <- merge(x = bbs_status, y = ru_status, by = "pkg",
                           all.x = TRUE)
bbs_ru_not_ok <- bbs_ru_comparison |>
  filter((build.x != build.y | !(check.x %in% c("OK", "WARNINGS")) | !(check.y %in% c("OK", "WARNING", "NOTE"))) & Deprecated == FALSE) |>
           select(pkg, install, build.x, build.y, check.x, check.y, version.x,
                  version.y, status, comment)

names(bbs_ru_not_ok) <- c("Package", "BBS_install", "BBS_build", "RU_build",
                          "BBS_check", "RU_check", "BBS_version", "RU_version",
                          "RU_status", "Comment")
```

#### Packages without x86_64 Linux builds for R 4.5

The following are packages in bioc R Universe but without an x86_64 Linux build for R 4.5.

```{r pkgs_not_in_agreement}
bbs_ru_not_ok |>
  filter(Comment == "Missing R4.5 on Linux") |>
  knitr::kable(caption = "Packages in RU without an x86_64 linux build for R 4.5") |>
  kableExtra::kable_styling(
    bootstrap_options = c("hover", "responsive")
  )
```

Notes: - Retrying to refresh the build on the dashboard failed for some packages. How can we rebuild a package that hasn't received a push in 3 months? - paxtoolsr should be in Bioc R Universe, but it isn't. Why?

## Packages not in agreement {#packages-not-in-agreement}

Looking at packages with the same version and removing deprecated packages, we have the following packages where the BBS and R Universe's results don't agree.

```{r the_comparison}
bbs_ru_not_ok2 <- bbs_ru_comparison |>
  filter(build.x != build.y | !(check.x %in% c("OK", "WARNINGS")) | !(check.y %in% c("OK", "WARNING", "NOTE"))) |>
  filter(Deprecated == FALSE & version.x == version.y & !is.na(status)) |>
  select(pkg, version.x, install, build.x, build.y, check.x, check.y,
         status, comment)
names(bbs_ru_not_ok2) <- c("Package", "BBS_version", "BBS_install", "BBS_build",
                           "RU_build", "BBS_check", "RU_check", "RU_status", "Comment")
bbs_ru_not_ok2 |>
  knitr::kable(caption = "Packages with different build results between BBS and RU")  |>
  kableExtra::kable_styling(
    bootstrap_options = c("hover", "responsive")
  )
```

`r dim(bbs_ru_not_ok2)[1]` packages disagree.

# Other

If a package repo isn't accessible or an error exists in the DESCRIPTION file, there will be an error in the registry for that submodule and it will show up at <https://github.com/r-universe/bioc/actions/workflows/sync.yml>. The red triangle on <https://bioc.r-universe.dev/> will take you to the specific workflow error.

Currently, this information is available on the BBS but I wonder if this information is available somewhere for R Universe OR if it would be necessary given that developers would be able to inspect their builds sooner.

### Important: Use the dbdump endpoint with read_bson to dump the API

Use `read_bson` to dump API data into a db

```{r read_bson, eval = FALSE}
#BiocManager::install("mongolite")
library(mongolite)
bioc <- mongolite::read_bson('https://bioc.r-universe.dev/api/dbdump')

# Note: it returns 2268 records rather than 2276 (fewer retrieved through
# another endpoint)
```

### Comparing a tarball from RU and BBS

Lastly, when I look at the builds, they're using various repositories, such p3m, r-universe, etc. This might be okay as long as the resulting binaries/tarballs are the generally the same. Looking at XVector for both, both the BBS and R Universe inject some additional information. R Universe also creates an `extra` directory that has citations, manuals, etc.

```{bash comparing_tarballs, eval = FALSE}
diff -r bbsXVector_0.47.2 ruXVector_0.47.2
diff -r bbsXVector_0.47.2/XVector/DESCRIPTION ruXVector_0.47.2/XVector/DESCRIPTION
5c5
<   "externally" (e.g. behind an R external pointer, or on disk).
---
>         "externally" (e.g. behind an R external pointer, or on disk).
28,33c28,31
< git_url: https://git.bioconductor.org/packages/XVector
< git_branch: devel
< git_last_commit: 9f44218
< git_last_commit_date: 2025-01-07
< Repository: Bioconductor 3.21
< Date/Publication: 2025-01-08
---
> Repository: https://bioc.r-universe.dev
> RemoteUrl: https://github.com/bioc/XVector
> RemoteRef: HEAD
> RemoteSha: 9f44218308f9d5867f0b9df5fae60d217f4e7d65
35c33
< Packaged: 2025-01-09 00:57:29 UTC; biocbuild
---
> Packaged: 2025-01-08 03:05:41 UTC; root
Only in ruXVector_0.47.2/XVector: extra
Only in ruXVector_0.47.2/XVector: manual.pdf
```

### Structure of a package through universe

The structure of a package looks like

```{r pkg_structure_in_ru, eval = "hide"}
head(str(ru_pkgs_i[1]))
```
